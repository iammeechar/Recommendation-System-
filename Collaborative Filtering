import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity

# Sample user-item rating matrix
ratings = pd.DataFrame({
    'User': ['A', 'B', 'C', 'D'],
    'Movie1': [5, 3, 4, 1],
    'Movie2': [4, 2, 3, 5],
    'Movie3': [2, 4, 1, 3],
    'Movie4': [3, 1, 2, 4]
})

# Convert data to a matrix suitable for cosine similarity
ratings_matrix = ratings.pivot_table(index='User', columns='Movie', values='Rating')

# Calculate cosine similarity between users
user_similarity = cosine_similarity(ratings_matrix)

# Function to recommend movies
def recommend_movies(user_id, num_recommendations):
    # Get similarity scores for the user
    similar_users = user_similarity[user_id]

    # Get movies rated by the user
    user_ratings = ratings_matrix.loc[user_id]

    # Calculate weighted average of ratings for all movies
    recommendations = pd.DataFrame(index=ratings_matrix.columns)
    for i in range(len(similar_users)):
        similar_user_id = similar_users.index[i]
        if similar_user_id == user_id:
            continue
        similarity = similar_users[i]
        recommendations[similar_user_id] = ratings_matrix.loc[similar_user_id] * similarity

    recommendations['weighted_average'] = recommendations.sum(axis=1)
    recommendations = recommendations.sort_values(by='weighted_average', ascending=False)

    # Remove movies already rated by the user
    recommendations = recommendations.drop(user_ratings.index)

    return recommendations.index[:num_recommendations]

# Example usage
recommended_movies = recommend_movies('A', 2)
print(recommended_movies)
